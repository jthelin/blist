# A minimal build pipeline to validate code changes.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

variables:
  buildConfiguration: 'Release'

jobs:
  - job: 'windows'
    pool:
      vmImage: 'windows-latest'
    displayName: 'Windows'

    steps:

      # Build with the CMake cross-platform build system
      - task: CMake@1
        inputs:
          cmakeArgs: --version
        displayName: 'CMake Version'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.ArtifactStagingDirectory)
          cmakeArgs: -S $(Build.SourcesDirectory)
        displayName: 'CMake Build Generation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.ArtifactStagingDirectory) --config $(buildConfiguration)
        displayName: 'CMake Build'
      - script: |
          dir /s $(Build.BinariesDirectory)
          dir /s $(Build.ArtifactStagingDirectory)
          dir /s $(Build.SourcesDirectory)
          set
        displayName: 'List build files and environment'
      - script: |
          cd $(Build.ArtifactStagingDirectory) && ctest.exe --output-on-failure --extra-verbose
        displayName: 'Run Tests'
      - task: CMake@1
        inputs:
          cmakeArgs: --install $(Build.ArtifactStagingDirectory) --prefix $(Build.BinariesDirectory) --config $(buildConfiguration)
        displayName: 'CMake Install'
      - script: |
          $(Build.BinariesDirectory)/bin/blist.exe blist.h
        displayName: 'Test program execution'


  - job: 'linux'
    pool:
      vmImage: 'ubuntu-20.04'
    displayName: 'Linux'

    steps:

      # Build with the CMake cross-platform build system
      - task: CMake@1
        inputs:
          cmakeArgs: --version
        displayName: 'CMake Version'
      - task: CMake@1
        inputs:
          workingDirectory: $(Build.ArtifactStagingDirectory)
          cmakeArgs: -S $(Build.SourcesDirectory)
        displayName: 'CMake Build Generation'
      - task: CMake@1
        inputs:
          cmakeArgs: --build $(Build.ArtifactStagingDirectory)
        displayName: 'CMake Build'

      - script: |
          ls -lhR $(Build.BinariesDirectory)
          ls -lhR $(Build.ArtifactStagingDirectory)
          ls -lhR $(Build.SourcesDirectory)
        displayName: 'List build files'

      - script: |
          cd $(Build.ArtifactStagingDirectory) && ctest --output-on-failure --extra-verbose
        displayName: 'Run Tests'

      - script: |
          $(Build.ArtifactStagingDirectory)/blist blist.h
        displayName: 'Test program execution'
